//
// Created by marijn on 7/19/23.
//

#ifndef STM32H_CMSIS_SPI_H
#define STM32H_CMSIS_SPI_H
#include "main.h"
#include "sys.h"
#include "gpio.h"


/*!<
 * types
 * */
typedef enum {
	SPI456_CLK_SRC_APBx =		0b000,	//R
	SPI456_CLK_SRC_PLL2_Q =		0b001,
	SPI456_CLK_SRC_PLL3_Q =		0b010,
	SPI456_CLK_SRC_HSI =		0b011,
	SPI456_CLK_SRC_CSI =		0b100,
	SPI456_CLK_SRC_HSE =		0b101
} SPI456_CLK_SRC_t;

typedef enum {
	SPI123_CLK_SRC_PLL1_Q =		0b000,	//R
	SPI123_CLK_SRC_PLL2_P =		0b001,
	SPI123_CLK_SRC_PLL3_P =		0b010,
	SPI123_CLK_SRC_I2S_CKIN =	0b011,
	SPI123_CLK_SRC_PER =		0b100
} SPI123_CLK_SRC_t;

typedef enum {
	SPI_PIN_DISABLE =	0x00000000,
	// SPI1
	SPI1_SS_A4 =		0x0405004C,		SPI1_MISO_B4 =		0x0415004C,
	SPI1_SCK_A5 =		0x0505004C,		SPI1_MOSI_B5 =		0x0515004C,
	SPI1_MISO_A6 =		0x0605004C,		SPI1_MOSI_D7 =		0x0735004C,
	SPI1_MOSI_A7 =		0x0705004C,		SPI1_MISO_G9 =		0x0965004C,
	SPI1_SS_A15 =		0x0F05004C,		SPI1_SS_G10 =		0x0A65004C,
	SPI1_SCK_B3 =		0x0315004C,		SPI1_SCK_G11 =		0x0B65004C,
	// SPI2
	SPI2_SCK_A9 =		0x0905000E,		SPI2_MOSI_B15 =		0x0F15000E,
	SPI2_SS_A11 =		0x0B05000E,		SPI2_MOSI_C1 =		0x0125000E,
	SPI2_SCK_A12 =		0x0C05000E,		SPI2_MISO_C2 =		0x0225000E,
	SPI2_SS_B4 =		0x0417000E,		SPI2_MOSI_C3 =		0x0325000E,
	SPI2_SS_B9 =		0x0915000E,		SPI2_SCK_D3 =		0x0335000E,
	SPI2_SCK_B10 =		0x0A15000E,		SPI2_SS_I0 =		0x0085000E,
	SPI2_SS_B12 =		0x0C15000E,		SPI2_SCK_I1 =		0x0185000E,
	SPI2_SCK_B13 =		0x0D15000E,		SPI2_MISO_I2 =		0x0285000E,
	SPI2_MISO_B14 =		0x0E15000E,		SPI2_MOSI_I3 =		0x0385000E,
	// SPI3
	SPI3_SS_A4 =		0x0406000F,		SPI3_MOSI_B5 =		0x0517000F,
	SPI3_SS_A15 =		0x0F06000F,		SPI3_SCK_C10 =		0x0A26000F,
	SPI3_MOSI_B2 =		0x0217000F,		SPI3_MISO_C11 =		0x0B26000F,
	SPI3_SCK_B3 =		0x0316000F,		SPI3_MOSI_C12 =		0x0C26000F,
	SPI3_MISO_B4 =		0x0416000F,		SPI3_MOSI_D6 =		0x0635000F,
	// SPI4
	SPI4_SCK_E2 =		0x0245004D,		SPI4_SS_E11 =		0x0B45004D,
	SPI4_SS_E4 =		0x0445004D,		SPI4_SCK_E12 =		0x0C45004D,
	SPI4_MISO_E5 =		0x0545004D,		SPI4_MISO_E13 =		0x0D45004D,
	SPI4_MOSI_E6 =		0x0645004D,		SPI4_MOSI_E14 =		0x0E45004D,
	// SPI5
	SPI5_SS_F6 =		0x06550054,		SPI5_MOSI_F11 =		0x0B550054,
	SPI5_SCK_F7 =		0x07550054,		SPI5_SS_H5 =		0x05750054,
	SPI5_MISO_F8 =		0x08550054,		SPI5_SCK_H6 =		0x06750054,
	SPI5_MOSI_F9 =		0x09550054,		SPI5_MISO_H7 =		0x07750054,
	// SPI6
	SPI6_SS_A0 =		0x000500C5,		SPI6_MISO_B4 =		0x041800C5,
	SPI6_SS_A4 =		0x040800C5,		SPI6_MOSI_B5 =		0x051800C5,
	SPI6_SCK_A5 =		0x050800C5,		SPI6_SCK_C12 =		0x0C2500C5,
	SPI6_MISO_A6 =		0x060800C5,		SPI6_SS_G8 =		0x086500C5,
	SPI6_MOSI_A7 =		0x070800C5,		SPI6_MISO_G12 =		0x0C6500C5,
	SPI6_SS_A15 =		0x0F0700C5,		SPI6_SCK_G13 =		0x0D6500C5,
	SPI6_SCK_B3 =		0x031800C5,		SPI6_MOSI_G14 =		0x0E6500C5,
} SPI_GPIO_t;

typedef enum {
	SPI_MODE_FULLDUPLEX =	0b00U,
	SPI_MODE_TRANSMIT =		0b01U,
	SPI_MODE_RECEIVE =		0b10U,
	SPI_MODE_HALFDUPLEX =	0b11U,
} SPI_MODE_t;

typedef enum {
	SPI_DIV_2 =				0b000U,
	SPI_DIV_4 =				0b001U,
	SPI_DIV_8 =				0b010U,
	SPI_DIV_16 =			0b011U,
	SPI_DIV_32 =			0b100U,
	SPI_DIV_64 =			0b101U,
	SPI_DIV_128 =			0b110U,
	SPI_DIV_256 =			0b111U,
} SPI_DIV_t;

typedef enum {
	SPI_CLK_POL_LOW =		0b0U,
	SPI_CLK_POL_HIGH =		0b1U,
} SPI_CLK_POL_t;

typedef enum {
	SPI_CLK_PHASE_EDGE1 =	0b0U,
	SPI_CLK_PHASE_EDGE2 =	0b1U,
} SPI_CLK_PHASE_t;

typedef enum {
	SPI_ENDIANNESS_MSB =	0b0U,
	SPI_ENDIANNESS_LSB =	0b1U,
} SPI_ENDIANNESS_t;

typedef enum {
	SPI_PROTOCOL_MOTOROLA =	0b000U,
	SPI_PROTOCOL_TI =		0b001U,
} SPI_PROTOCOL_t;


/*!<
 * variables
 * */
extern uint32_t SPI123_kernel_frequency;
extern uint32_t SPI45_kernel_frequency;
extern uint32_t SPI6_kernel_frequency;


/*!<
 * init
 * */
// TODO: hardware NSS does not work!!
void config_SPI_kernel_clocks(
		SPI123_CLK_SRC_t spi123_src, SPI456_CLK_SRC_t spi45_src,
		SPI456_CLK_SRC_t spi6_src
);
void fconfig_SPI_master(
	SPI_GPIO_t sck, SPI_GPIO_t mosi, SPI_GPIO_t miso, SPI_MODE_t mode,
	SPI_DIV_t div, SPI_CLK_POL_t clk_pol, SPI_CLK_PHASE_t clk_phase, uint8_t data_idle,
	uint8_t data_size, uint8_t fifo_threshold, SPI_ENDIANNESS_t endianness, SPI_PROTOCOL_t protocol
);
void config_SPI_master(SPI_GPIO_t sck, SPI_GPIO_t mosi, SPI_GPIO_t miso, SPI_DIV_t div);


/*!<
 * usage
 * */
// TODO: halfduplex, 16/32 bit transfer (as of yet unused)
// TODO: IT, DMA, errors
uint32_t SPI_master_transmit(SPI_TypeDef* spi, GPIO_TypeDef* ss_port, uint8_t ss_pin, const uint8_t* buffer, uint32_t size, uint32_t timeout);		// -> n unprocessed


#endif //STM32H_CMSIS_SPI_H
